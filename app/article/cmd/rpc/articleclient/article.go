// Code generated by taoctl. DO NOT EDIT!
// Source: article.proto

package articleclient

import (
	"context"

	"backend-learning/blog/app/article/cmd/rpc/article"

	"google.golang.org/grpc"
	"manlu.org/tao/zrpc"
)

type (
	ArticleDetail      = article.ArticleDetail
	CreateArticleReq   = article.CreateArticleReq
	CreateArticleResp  = article.CreateArticleResp
	DeleteArticleReq   = article.DeleteArticleReq
	DeleteArticleResp  = article.DeleteArticleResp
	GetArticleListReq  = article.GetArticleListReq
	GetArticleListResp = article.GetArticleListResp
	ShowArticleReq     = article.ShowArticleReq
	ShowArticleResp    = article.ShowArticleResp

	Article interface {
		//  create article
		CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error)
		GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListResp, error)
		ShowArticle(ctx context.Context, in *ShowArticleReq, opts ...grpc.CallOption) (*ShowArticleResp, error)
		DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error)
	}

	defaultArticle struct {
		cli zrpc.Client
	}
)

func NewArticle(cli zrpc.Client) Article {
	return &defaultArticle{
		cli: cli,
	}
}

//  create article
func (m *defaultArticle) CreateArticle(ctx context.Context, in *CreateArticleReq, opts ...grpc.CallOption) (*CreateArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.CreateArticle(ctx, in, opts...)
}

func (m *defaultArticle) GetArticleList(ctx context.Context, in *GetArticleListReq, opts ...grpc.CallOption) (*GetArticleListResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.GetArticleList(ctx, in, opts...)
}

func (m *defaultArticle) ShowArticle(ctx context.Context, in *ShowArticleReq, opts ...grpc.CallOption) (*ShowArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.ShowArticle(ctx, in, opts...)
}

func (m *defaultArticle) DeleteArticle(ctx context.Context, in *DeleteArticleReq, opts ...grpc.CallOption) (*DeleteArticleResp, error) {
	client := article.NewArticleClient(m.cli.Conn())
	return client.DeleteArticle(ctx, in, opts...)
}
